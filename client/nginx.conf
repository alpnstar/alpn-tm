# nginx.conf

# Определяем пользователя, от имени которого будет работать Nginx.
# user www-data;

# Количество рабочих процессов. Обычно равно количеству ядер процессора.
worker_processes auto;

# Путь к файлу, где будут храниться ID основного процесса.
pid /run/nginx.pid;

events {
    # Максимальное количество одновременных соединений на один рабочий процесс.
    worker_connections 768;
}

http {
    # Включаем определение MIME-типов файлов.
    include /etc/nginx/mime.types;
    # Устанавливаем MIME-тип по умолчанию.
    default_type application/octet-stream;

    # --- НАСТРОЙКИ СЖАТИЯ ---
    # Включаем сжатие Gzip на лету.
    gzip on;
    # Отключаем сжатие для старых версий IE.
    gzip_disable "msie6";
    # Сжимаем ответы для всех версий HTTP.
    gzip_vary on;
    # Уровень сжатия. 6 — хороший баланс между степенью сжатия и нагрузкой на CPU.
    gzip_comp_level 6;
    # Минимальная длина ответа для сжатия (в байтах).
    gzip_min_length 1024;
    # Сжимать для всех проксированных запросов.
    gzip_proxied any;
    # Типы файлов для сжатия.
    gzip_types
        application/javascript
        application/x-javascript
        text/css
        text/javascript
        text/plain
        text/xml
        application/json
        application/vnd.ms-fontobject
        application/x-font-ttf
        font/opentype
        image/svg+xml
        image/x-icon;

    # --- ОСНОВНОЙ СЕРВЕР ---
    server {
        # Порт, который будет слушать сервер.
        listen 80;
        # Имя сервера (домен). Замените на свой домен.
        server_name your_domain.com www.your_domain.com;

        # Путь к корневой директории с файлами вашего приложения.
        # Это папка, куда Webpack собирает ваш проект (в вашем случае 'bundle').
        # На сервере вы должны будете разместить содержимое папки 'bundle' в '/var/www/wms/html'.
        root /var/www/wms/html;
        # Файл, который будет отдаваться по умолчанию.
        index index.html;

        # --- ОБРАБОТКА ЗАПРОСОВ ---
        # Это ключевая настройка для Single Page Application (SPA).
        location / {
            # Nginx пытается найти файл по прямому запросу ($uri).
            # Если не находит, пытается найти папку ($uri/).
            # Если и ее нет, то он отдает /index.html.
            # Это позволяет React Router обрабатывать все пути.
            try_files $uri $uri/ /index.html;
        }

        # --- КЭШИРОВАНИЕ СТАТИЧНЫХ ФАЙЛОВ ---
        # Для CSS и JS файлов устанавливаем долгий срок кэширования в браузере.
        # [contenthash] в именах файлов гарантирует, что при изменении файла браузер запросит новую версию.
        location ~* \.(?:css|js)$ {
            expires 1y;
            add_header Cache-Control "public";
        }

        # Для изображений и шрифтов также устанавливаем долгий срок кэширования.
        location ~* \.(?:ico|gif|jpe?g|png|webp|svg|woff|woff2|ttf|eot)$ {
            expires 1y;
            add_header Cache-Control "public";
        }

        # --- ОБРАБОТКА ОШИБОК ---
        # Можно настроить кастомные страницы ошибок.
        # error_page 500 502 503 504 /50x.html;
        # location = /50x.html {
        #     root /usr/share/nginx/html;
        # }
    }
}
